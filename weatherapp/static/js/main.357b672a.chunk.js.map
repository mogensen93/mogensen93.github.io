{"version":3,"sources":["components/FiveDayForecast.js","components/SingleDayWeather.js","components/Cat.js","App.js","serviceWorker.js","index.js"],"names":["FiveDayForecast","state","forecast","loading","fetch","this","props","cityChosen","res","json","setState","console","log","days","className","type","height","width","list","map","info","index","dt_txt","slice","class","key","Date","dt","getDay","src","weather","icon","alt","main","temp_max","temp_min","wind","speed","description","Component","SingleDayWeather","citystats","city","name","temp","feels_like","Cat","cat","catInfo","url","App","cityName","handleInputChange","event","target","id","value","path","to","href","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.357b672a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport './App.css'\r\n\r\nexport default class FiveDayForecast extends Component {\r\n\r\n    state = {\r\n        forecast: {},\r\n        loading: true\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        const res = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${this.props.cityChosen}&appid=42d16ec9f2fd02159a1fae7382308eb6&units=metric`);\r\n        const forecast = await res.json();\r\n        this.setState({forecast, loading: false})\r\n        console.log(this.state.forecast);\r\n    }\r\n\r\n    render() {\r\n        const {forecast, loading } = this.state;\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        \r\n       \r\n        return (\r\n           <div> \r\n                { loading \r\n                    ? \r\n                    <div>\r\n                        <h1 className = \"alignCenter\"> API' is loading</h1>\r\n                        <Loader type=\"ThreeDots\" height={100} width={100} className =\"fullAlign\"/>\r\n                    </div>\r\n                    : \r\n                    <div className=\"alignCenter\"> \r\n                     \r\n                     {\r\n                            <div className = \"forecastDiv\">\r\n                            {forecast.list.map((info, index) => {\r\n                                  console.log(info.dt_txt.slice(10).slice(1,3))\r\n                                if(info.dt_txt.slice(10).slice(1,3)  === \"15\")\r\n                              \r\n                                return (\r\n                \r\n                                        <div class=\"containDiv\" key={\"table-header\" + index}>\r\n                                            <div className=\"spaceBetween\">\r\n                                    \r\n                                                <h2>{days[(new Date(info.dt*1000).getDay())]} </h2><br/>\r\n                                                <img className =\"icons\" src={`http://openweathermap.org/img/w/${info.weather[0].icon}.png`} alt=\"Weather icon\"></img>\r\n                                                <p>Max Temp: {info.main.temp_max} Celcius<br/></p>\r\n                                                <p>Min Temp: {info.main.temp_min} Celcius<br/></p>\r\n                                                <p>Wind speed: {info.wind.speed} m/s</p>\r\n                                                <p>Description: {info.weather[0].description}</p>\r\n\r\n                                            </div>\r\n                                      </div>\r\n                                    ) \r\n                                \r\n                                return ( <div> </div>)\r\n                            })}\r\n\r\n                        </div>\r\n                    }\r\n                    </div>\r\n                }\r\n                   \r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Loader from 'react-loader-spinner';\r\nimport FiveDayForecast from './FiveDayForecast';\r\n\r\n\r\nexport default class SingleDayWeather extends Component {\r\n\r\n    state = {\r\n        citystats: {},\r\n        loading: true,\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        const res = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.props.city}&appid=42d16ec9f2fd02159a1fae7382308eb6&units=metric`);\r\n        const citystats = await res.json();\r\n        this.setState({citystats, loading: false})\r\n    }   \r\n\r\n\r\n    render() {\r\n        const {citystats, loading} = this.state;\r\n        return(\r\n            <div> \r\n                { loading \r\n                    ? \r\n                    <div>\r\n                        <h1 className = \"alignCenter\"> API' is loading</h1>\r\n                        <Loader type=\"ThreeDots\" height={100} width={100} className =\"fullAlign\"/>\r\n                    </div>\r\n                    : \r\n                    <div className=\"alignCenter\"> \r\n\r\n                        <h1>{citystats.name}</h1>\r\n                        <img className =\"icons\" src={`http://openweathermap.org/img/w/${citystats.weather[0].icon}.png`} alt=\"Weather icon\"></img>\r\n\r\n                        <p>\r\n                        Temprature: {citystats.main.temp} Celcius<br/>\r\n                        Feels like: {citystats.main.feels_like} Celcius<br/>\r\n                        Wind speed: {citystats.wind.speed} m/s<br/>\r\n                        Type of weather: {citystats.weather[0].main}<br/>\r\n                        Description: {citystats.weather[0].description}<br/>\r\n                        </p>\r\n\r\n                        <FiveDayForecast cityChosen={this.props.city}/>\r\n\r\n                    </div>\r\n                }\r\n                   \r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport MoonLoader from 'react-loader-spinner';\r\nimport './App.css';\r\n\r\n\r\nexport default class Cat extends Component {\r\n\r\n    state = {\r\n        cat: {},\r\n        loading: true\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const res = await fetch(`https://api.thecatapi.com/v1/images/search`);\r\n        const cat = await res.json();\r\n        this.setState({cat, loading: false})\r\n       \r\n    }   \r\n    render() {\r\n        const {loading, cat} = this.state;\r\n        return(\r\n            <div className=\"catContainer\">  \r\n                { loading \r\n                    ? \r\n                    <div>\r\n                        <h1 className = \"alignCenter\"> Did someone say Cats?</h1>\r\n                        <MoonLoader type=\"MoonLoader\" height={100} width={100} className =\"fullAlign\"/>\r\n                    </div>\r\n                    : \r\n                    <div className=\"alignCenter catContainer\"> \r\n                \r\n                        {\r\n                            <tr>\r\n                            {cat.map((catInfo, index) => \r\n                                (<th key={\"table-header\" + index}>\r\n                                    <img className=\"catPicture\" src={catInfo.url} alt=\"cat\"/>\r\n                                </th>))}\r\n                            </tr>\r\n                        \r\n                        }\r\n\r\n                    </div>\r\n                }\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport SingleDayWeather from './components/SingleDayWeather';\nimport Cat from './components/Cat';\n\nclass App extends Component {\n\n  state = {\n    cityName : \"\",\n  }\n\n\n  handleInputChange = (event) => {\n    this.setState({ [event.target.id]: event.target.value})\n  }\n\n  render() {\n    return (\n      <Router>\n        <div> \n        <Switch>\n\n          <Route path=\"/openweathermap\">\n            <div className=\"alignCenter\">\n              <SingleDayWeather city={this.state.cityName}/>\n              <button ><Link to=\"/\" className=\"button\">Try again</Link></button>\n            </div>\n          </Route>\n\n          <Route path=\"/\">\n            <div className=\"alignCenter\">\n              <h1> Welcome to the Weather App</h1>\n              <p> Its developed using the free version of <a href=\"https://openweathermap.org/\">OpenWeather</a></p>\n              <p> It gives the oppertunity to call weather data on a location</p>\n              <p> Try E.g Copenhagen, Stockholm, London</p>\n\n              <input id=\"cityName\" placeholder =\"Which City\" onChange = {this.handleInputChange}></input>  \n              <button><Link to=\"/openweathermap\" className=\"button\">Search</Link></button>\n\n              <br/>\n              <br/>\n            \n              <p>Also, Cat tax</p>\n              <Cat />\n            </div>\n          </Route>\n\n        </Switch>\n      </div>\n    </Router>\n    );\n    }\n  }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}